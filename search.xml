<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[国际化的那些事]]></title>
      <url>%2F2017%2F05%2F27%2F%E5%9B%BD%E9%99%85%E5%8C%96%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
      <content type="text"><![CDATA[最近几天在做项目国际化，在此过程中体会到了什么是真正的搬砖。国际化做完之后手头工作暂时不是太多，可以写点东西。虽然国际化比较简单，但国际化毕竟用的不是太多时间长了容易忘记一些东西。所以想着还是记录一下吧。其中重点也只有APP内部修改语言而已。 国际化原理国际化其实都大同小异，其核心思想就是为每种语言单独定义一份资源。每种语言都有自己的xxx.lproj文件夹，加载资源时只需要加载相应语言文件夹下的资源就OK，这步可以系统为我们完成，也可以手动去做。iOS就是通过xxx.lproj目录来定义每个语言的资源，这里的资源可以是图片，文本，Storyboard，Xib等。 创建国际化所需文件新建工程是没有国际化文件的，所以首先创建名为Localizable.strings文件，如图1，所示： 创建好文件之后点击Localization.sting文件，在Xcode右工具栏中按提示操作，如图2，所示： 接着Xcode自动创建了Base和English两个国际化文件，如图3，所示： 如果你国际化语言中有英语，请勾选English文件，接着就可以创建其他的目标语言文件了，点击PROJECT，在Info中找到Localizations，点击加号来添加国际化目标文件，如图4，所示： 添加完之后就可以在项目工程中看到下面的文件，如图5，所示： 国际化过程下面可以直接在需要国际化的地方使用NSLocalizedString(&lt;#key#&gt;, &lt;#comment#&gt;),key为需要国际化文字的索引，comment(如果国际化文件中找不到key，系统会使用comment。如果comment为nil，会使用key值)12self.navigationItem.title = NSLocalizedString(@"title_badCoding", nil);self.welcomeLabel.text = NSLocalizedString(@"welcome", nil); .sting文件就是一个一个键值对，注意格式(“key” = “value”;)符号不要错了，”;”这个如果错了，就坑爹了。12345678Localizable.strings(Base)"title_badCoding" = "BadCoding";"welcome" = "Welcome to BadCoding";(Simplified)"title_badCoding" = "BadCoding";"welcome" = "欢迎来到 BadCoding";... OK，到设置界面修改系统语言，在启动APP，查看国际化后的语言。 应用内修改语言通常情况下，想要修改APP语言，需要到Setting界面修改系统语言，等待几秒，然后打开APP会重启。这种交互方式非常不友好，用户不会喜欢，开发者在做国际化测试的时候也非常难受，所以我们需要在app内部来修改语言，来避免这种交互方式。 上面我们说到加载相应的语言文件夹下的资源可系统完成，也可手动完成。应用内修改语言就是手动加在资源，app加载资源是由NSBundle来决定的。 NSBundleAn NSBundle object represents a location in the file system that groups code and resources that can be used in a program.NSBundle objects locate program resources, dynamically load and unload executable code, and assist in localization. You build a bundle in Xcode using one of these project types: Application, Framework, plug-ins. 实现修改下面我们对NSBundle进行处理来自定义加载资源文件，首先创建NSBundle的子类，并重写父类方法123456789101112131415static const char _bundle = 0;@interface BundleExtension : NSBundle@end@implementation BundleExtension- (NSString *)localizedStringForKey:(NSString *)key value:(NSString *)value table:(NSString *)tableName&#123; NSBundle *bundle = objc_getAssociatedObject(self, &amp;_bundle); return bundle ? [bundle localizedStringForKey:key value:value table:tableName] : [super localizedStringForKey:key value:value table:tableName];&#125;@end 然后为NSBundle写一个Category，自定修改语言的方法，方法实现如下：12345678910111213@implementation NSBundle (Language)+ (void)setLanguage:(NSString *)language&#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; object_setClass([NSBundle mainBundle], [BundleExtension class]); &#125;); objc_setAssociatedObject([NSBundle mainBundle], &amp;_bundle, language ? [NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:language ofType:@"lproj"]] : nil, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&#125;@end 接下来我们就可以实现更换语言的功能了，这里我设置了几个Button来控制语言的切换：123456789101112131415161718192021222324252627282930313233343536373839404142#pragma mark - button action- (void)changeLanguageButtonAction:(UIButton *)sender&#123; static NSInteger index = 0; if (index != sender.tag) &#123; index = sender.tag; &#125; else &#123; return; &#125; switch (sender.tag) &#123; case 101: [self changeLanguageWithCode:@"zh-Hans"]; break; case 102: [self changeLanguageWithCode:@"en"]; break; case 103: [self changeLanguageWithCode:@"ja"]; break; default: break; &#125;&#125;#pragma mark - private- (void)changeLanguageWithCode:(NSString *)code&#123; // 设置语言 [NSBundle setLanguage:code]; // 然后将设置好的语言存储好，下次进来直接加载 [[NSUserDefaults standardUserDefaults] setObject:code forKey:@"myLanguage"]; [[NSUserDefaults standardUserDefaults] synchronize]; // 我们要把系统windown的rootViewController替换掉 BDRootViewController *rootVC = [[BDRootViewController alloc] init]; [UIApplication sharedApplication].keyWindow.rootViewController = rootVC; // 跳转到设置页 rootVC.tabBarController.selectedIndex = 2;&#125; 这里替换掉rootViewController，之前的rootViewController会被释放掉。 至此差不多快达到我们的目标了。 此时如果APP重启，会重新加载资源文件，而此时依然会加载系统的语言所对应的资源文件，所以在上面将目标语言存在NSUserDefaults里，在app启动时加载NSUserDefaults存储的语言：123456789- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; if ([[NSUserDefaults standardUserDefaults] objectForKey:@"myLanguage"] &amp;&amp; ![[[NSUserDefaults standardUserDefaults] objectForKey:@"myLanguage"] isEqualToString:@""]) &#123; [NSBundle setLanguage:[[NSUserDefaults standardUserDefaults] objectForKey:@"myLanguage"]]; &#125; ... return YES;&#125; 最后别忘了如果后台在根据header头里面的Accept-Language来返回相应的语言时，需要重写header里面的A-L(AFNetworking会默认取系统的语言)。 效果请看这里]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[install-hexo]]></title>
      <url>%2F2017%2F02%2F07%2Finstall-hexo%2F</url>
      <content type="text"><![CDATA[在简书上闲逛的时候看到了一篇关于利用hexo在GitHub上布一个blog的文章，感觉挺有意思便试着做了一下。hexo文档非常详细，关键是有中文版。按照步骤即可完美的做出自己的blog！ 环境配置安装Hexo前你需要确定自己已经安装了下面俩玩意：∙ Node.js (用来生成静态页面)∙ Git (用来将本地Hexo内容提交到Github上) 其中Git就不用介绍了，下面说一下 Node.js 的安装方法(Hexo官网推荐使用nvm安装)： 这里下载工具用的是wget(很强大的下载工具)，而安装wget只需一步:1$ brew install wget //应该都安装Homebrew了吧 首先验证nvm下载路径 1$ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh Wget下载: 1$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh nvm安装完成后退出并重启terminal，执行命令：1$ nvm install stable Node.js安装完成。 安装Hexo当Git和Node.js安装完成后，执行以下命令： 1$ sudo npm install -g hexo-cli 接着输入管理员密码即可(-g 代表全局安装)。 初始化本地站点首先进入你想要初始化站点的位置(cd)，执行 hexo init 命令： 1$ hexo init blog blog为你建立的文件夹，即为本地站点。cd到blog文件夹下， 执行如下命令， 安装npm： 1$ npm install 执行如下命令，开启本地服务器： 1$ hexo s 哈哈，中可以看到界面了：打开浏览器输入：http://localhost:4000 ，可以看到如下界面； 本地设置完成后，下面就可以关联GitHub仓库了。 关联GitHub创建仓库登陆GitHub账号，创建一个仓库，命名规则 “用户名.github.io”，结果如下图所示： cd到本地站点下（Blog文件夹下）执行 ： 1$ ll 列出blog文件夹下的内容： 用vim打开_config.yml，命令如下： 1$ vim _config.yml 打开后往下滑到最后，修改成下边的样子： deploy: type: git repository: https://github.com/fruitsw/fruitsw.github.io branch: master 你需要将repository后fruitsw换成你自己的用户名，地址在上图2位置获取。hexo 3.1.1版本后type:值为git。 注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错，切记 切记,我写错后试了一下，的确是这样。 在blog文件夹目录下执行生成静态页面命令： 1$ hexo generate 或者：hexo g 此时若出现如下报错：ERROR Local hexo not found in ~/blogERROR Try runing: ‘npm install hexo –save’则执行命令： 1npm install hexo --save 若无报错，自行忽略此步骤。 再执行配置命令： 1$ hexo deploy 或者：hexo d 注意：若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git： 1$ npm install hexo-deployer-git --save 再次执行hexo generate和hexo deploy命令。 若你未关联Github，则执行hexo deploy命令时终端会提示你输入Github的用户名和密码，即 12Username for 'https://github.com':Password for 'https://github.com': hexo deploy命令执行成功后，浏览器中打开网址http://fruitsw.github.io（将fruitsw换成你的用户名）能看到和打开http://localhost:4000时一样的页面。 至此基本完成hexo与GitHub关联，但每次push都需要密码。为避免每次输入Github用户名和密码的麻烦，可参照第二节方法。 添加ssh key到Github检查SSH keys是否存在Github执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，则直接进入步骤2.3将SSH key添加到Github中，否则进入下一步生成SSH key。 1$ ls -al ~/.ssh 生成新的ssh key执行如下命令生成public/private rsa key pair，注意将your_email@example.com换成你自己注册Github的邮箱地址。 1$ ssh-keygen -t rsa -C "your_email@example.com" 默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。 将ssh key添加到Github中Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。 进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key: Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key即可。 发布文章终端cd到blog文件夹下，执行如下命令新建文章： 1$ hexo new "postName" 创建文章文件 名为postName.md的文件会建在目录/blog/source/_posts下。用你喜欢的编辑器来编辑你的文章。 文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布： 1$ hexo clean 1$ hexo g 或hexo generate //生成静态网页 1$ hexo d 或hexo deploy。 //将文章部署到GitHub上 至此，Mac上搭建基于Github的Hexo博客就完成了。下面的内容是介绍安装theme，添加评论功能和绑定个人域名。 安装theme你可以到Hexo官网主题页去搜寻自己喜欢的theme。这里以hexo-theme-next为例,终端cd到 blog 目录下执行如下命令(注意一定要在blog文件夹下完成)： 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 将blog目录下_config.yml里theme的名称landscape修改为next。 注意：如果你一不小心在根目录下执行 git clone…… 可能会报错，网上会有些建议执行 git init 初始化git仓库来解决这一问题，这里千万注意git init只能在相关的blog目录下执行，而不应该在根目录下初始化git，因为它会把整个根目录作为git仓库，回占用内存，如果你一不小心这么做了，你需要删除.git文件，（估计没人想把电脑磁盘当作仓库吧）第一步显示隐藏文件夹以及文件12$ defaults write com.apple.finder AppleShowAllFiles -boolean true$ killall Finder 第二步：进入根目录删除.git文件第三步：恢复隐藏文件夹12$ defaults write com.apple.finder AppleShowAllFiles -boolean false$ killall Finder 终端cd到blog目录下执行如下命令(每次部署文章的步骤)： 1$ hexo clean //清除缓存文件 (db.json) 和已生成的静态文件 (public) 1$ hexo g //生成缓存和静态文件 1$ hexo d //重新部署到服务器 至于更改theme内容，比如名称，描述，头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可， 不要忘记冒号:后加空格。当然感觉评论系统和三方统计分析更好玩些，没事的时候可以试一下。 NexT 使用文档里有极详细的介绍。 你也可以绑定个人域名，有需要的可以看这篇文章与佳期的简书。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F06%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
